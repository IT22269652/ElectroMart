import mongoose from 'mongoose';
import Payment from '../models/Payment.js';

// Create a new payment record
export const createPayment = async (req, res) => {
  try {
    const { userId, orderId, nameOnCard, cardNumber, expiryDate, cvc, amount } = req.body;

    console.log('Received payment data:', req.body);

    // Validate required fields
    if (!userId || !orderId || !nameOnCard || !cardNumber || !expiryDate || !cvc || !amount) {
      return res.status(400).json({ message: 'All required fields must be provided' });
    }

    // Validate amount
    if (typeof amount !== 'number' || amount <= 0) {
      return res.status(400).json({ message: 'Amount must be a positive number' });
    }

    // Simulate payment processing
    const paymentStatus = 'Completed';

    const newPayment = new Payment({
      userId,
      orderId,
      nameOnCard,
      cardNumber,
      expiryDate,
      cvc,
      amount,
      status: paymentStatus,
      // transactionId will be auto-generated by the schema default
    });

    console.log('Payment object before save:', newPayment);

    const savedPayment = await newPayment.save();
    console.log('Payment saved successfully:', savedPayment);
    res.status(201).json(savedPayment);
  } catch (error) {
    console.error('Error in createPayment:', {
      message: error.message,
      stack: error.stack,
      requestBody: req.body,
    });
    res.status(500).json({
      message: 'Error creating payment record',
      details: error.message,
    });
  }
};

// Get payment details for a specific order
export const getPaymentByOrder = async (req, res) => {
  try {
    const orderId = req.params.orderId;
    const payment = await Payment.findOne({ orderId });
    if (!payment) {
      return res.status(404).json({ message: 'Payment not found for this order' });
    }

    res.status(200).json(payment);
  } catch (error) {
    console.error('Error in getPaymentByOrder:', error);
    res.status(500).json({ message: 'Error fetching payment details', details: error.message });
  }
};

// Get all payments (for admin)
export const getAllPayments = async (req, res) => {
  try {
    const payments = await Payment.find().sort({ createdAt: -1 });
    res.status(200).json(payments);
  } catch (error) {
    console.error('Error in getAllPayments:', error);
    res.status(500).json({ message: 'Error fetching all payments', details: error.message });
  }
};